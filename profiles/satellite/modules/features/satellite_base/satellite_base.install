<?php
/**
 * @file
 * Installation routines for the ESN Content Base feature.
 */

use ESN\Satellite\Requirements\ComposerPackageInfo;
use ESN\Satellite\Requirements\ComposerRequirements;

/**
 * Implements hook_requirements
 * @param $phase
 *           The phase in which requirements are checked
 */
function satellite_base_requirements($phase){
  satellite_register_autoloader();
  $composer = ComposerRequirements::load();
  /** @var ComposerPackageInfo|null $package */
  $package = NULL;
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();
  $phpversion = phpversion();

  // Test PHP version
  $requirements['satellite_php'] = [
    'title' => $t('ESN Satellite (PHP)'),
    'value' => ($phase == 'runtime') ? l($phpversion, 'admin/reports/status/php') : $phpversion,
  ];

  $versionMinimumFailed = version_compare($phpversion, SATELLITE_MINIMUM_PHP, '<');
  $versionRecommendedFailed = version_compare($phpversion, SATELLITE_RECOMMENDED_PHP, '<');
  if ($versionRecommendedFailed) {
    $itcomLink = $t(ESN_ITCOM_LINK);
    $upgradeMessage = $t('<strong>Your PHP installation is too old.</strong> Please upgrade your server or web hosting <strong>before updating to Satellite %satellite!</strong>!');
    $upgradeSoonMessage = $t('Please upgrade your server or web hosting soon!');
    $description = $t(SATELLITE_PHP_VERSION_MESSAGE);

    if ($versionMinimumFailed) {
      $description .= ' ' . $upgradeMessage;
      $requirements['satellite_php']['severity'] = REQUIREMENT_ERROR;
    } else {
      $description .= ' ' . $upgradeSoonMessage;
      $requirements['satellite_php']['severity'] = REQUIREMENT_WARNING;
    }
    $description = "<p style=\"text-indent: 0;margin-left: 1rem;\">$description<br />$itcomLink</p>";
    $requirements['satellite_php']['description'] = format_string($description,
      [
        '%php' => PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.' . PHP_RELEASE_VERSION,
        '%version' => SATELLITE_MINIMUM_PHP,
        '%recommended' => SATELLITE_RECOMMENDED_PHP,
        '%satellite' => SATELLITE_BASE_VERSION,
      ]);
  } elseif (version_compare($phpversion, '7.3.0', '>=')) { // see https://www.drupal.org/project/date/issues/3070835
    $requirements['satellite_php']['description'] = t("Your PHP version (%php) isn't supported because some contributed modules are not yet compatible with PHP 7.3.x.",
      [
        '%php' => PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.' . PHP_RELEASE_VERSION,
      ]);
    $requirements['satellite_php']['severity'] = REQUIREMENT_ERROR;
  }

  // JSON Mapper
  $jsonmapper = [
    'title' => $t('JSON Mapper'),
    'value' => '',
    'severity' => REQUIREMENT_OK,
  ];
  if ($package = $composer->getPackage('netresearch/jsonmapper')) {
    $jsonmapper['value'] = $package->getVersion();
  }
  $requirements['jsonmapper'] = $jsonmapper;

  return $requirements + \ESN\Satellite\Notifications\NotificationManager::requirements();
}

/**
 *  Revert feature: Enable service links and metatag integration
 */
function satellite_base_update_7001() {
  $modules = array('service_links', 'metatag');
  module_enable($modules, true);
  esn_base_features_revert(array(
    'satellite_base'
  ));
}

/**
 * Enable Imagecache Token and Transliteration
 */
function satellite_base_update_7002() {
  module_enable(array('imagecache_token', 'transliteration'));
}

<?php

define('SATELLITE_CALLHOME_URL', 'http://satellite.esn.org/api/satellite_home');
define('SATELLITE_CALLHOME_RELEASE_URL', 'http://satellite.esn.org/release-history/1');

/**
 * get php information to call home with
 */
function _satellite_callhome_get_php_info() {

  $ret = array();

  $extensions = get_loaded_extensions();

  sort($extensions);

  foreach ($extensions as $ext) {
    $version = phpversion($ext);
    $ret['extensions'][$ext] = $version ? $version : 'disabled/unknown';
  }

  $ret['uname'] = php_uname();
  $ret['version'] = phpversion();

  return array('_php' => $ret);
}

/**
 * get all module versions
 */
function _satellite_callhome_get_module_versions( $modules = null ) {

  // Get all modules
  if ( is_null($modules) ) {
    $modules = module_list();
  }

  $modules_info = array();

  foreach ($modules as $module) {
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    if ( !isset($info['version']) ) {
      $info['version'] = 'unknown';
    }
    $modules_info[$module] = $info['version'];
  }
  return array('_modules' => $modules_info);
}

/**
 * get satellite specific settings to identify the section that is asking for help.
 */
function _satellite_callhome_get_esn_settings() {

  $esn_settings = array(
    'scope' => satellite_settings_get_scope(),
    'code' => satellite_settings_get_code(),
    'mail' => variable_get('site_mail', ''),
    'default_content' => variable_get('satellite_install_default_content', ''),
    'cas_roles_relations' => variable_get('cas_roles_relations', array()),
    
  );
  return array( '_satellite_settings' => $esn_settings);
}

/**
 * get the version of the satellite
 */
function satellite_callhome_version() {
  $version = 'unknown';

  $path = drupal_get_path('module', 'satellite_base') . '/satellite_base.info';
  $info = drupal_parse_info_file($path);

  if ( !isset($info['version']) ) {
    $info['version'] = 'unknown';
  }

  //if ( preg_match( '/^\d+\.\d+(\.\d+)?(-(alpha|beta|rc)\d+)?$/', $info['version']) )     {
    // allow 4.0; 4.0-alpha3; 4.0.1 etc...
    $version = $info['version'];
  // }

  return $version;
} 

/**
 * call the ESN server and post the data
 */
function satellite_callhome_call() {

  $version = satellite_callhome_version();
  
  $data = array(
    'version' => $version, 
    'module_list' => array_merge(_satellite_callhome_get_module_versions(), _satellite_callhome_get_php_info(), _satellite_callhome_get_esn_settings()) ,
    'base_url' => $GLOBALS['base_url'],
  );

  $options = array();
  $options['method'] = 'POST';
  $options['data'] = 'data=' . urlencode( serialize($data) );

  $options['headers'] = array(
    'User-Agent' => 'Satellite ' . $version . ' Drupal (+http://drupal.org/)',
    'Content-Type' => 'application/x-www-form-urlencoded'
  );

  $return = drupal_http_request(SATELLITE_CALLHOME_URL, $options); 

  if ($return->code == 200) {
    watchdog('satellite_callhome', 'Satellite called home successfully.', array(), WATCHDOG_INFO);
  }  
  else {
    watchdog('satellite_callhome', 'Satellite failed to call home. Code %code. Error: %error', array('%code' => $return->code, '%error' => $return->error), WATCHDOG_ERROR);
  }

}

/**
 * Implements hook_cron.
 */
function satellite_callhome_cron() {

  $last_call = variable_get('satellite_callhome_lastcall', 0);
  $now = time();

  if ( ($now - $last_call) > 24 * 3600  ) {
    if (variable_get('satellite_callhome_optin', TRUE)) {
      satellite_callhome_call();
    }
    if (variable_get('satellite_callhome_update', FALSE)) {
      satellite_callhome_set_message();
    }
    variable_set('satellite_callhome_lastcall', time() );
    
    // set the update variable to true if its not set on the second cron run
    if (variable_get('satellite_callhome_update', NULL) === NULL && $last_call != 0) {
      variable_get('satellite_callhome_update', TRUE);
    }
  }
  
}

/**
 * Implements hook_menu.
 */
function satellite_callhome_menu() {

  $items['admin/settings/satellite/satellite_callhome'] = array(
    'title' => 'Satellite Callhome',
    'description' => 'Enable or disable the callhome feature.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('satellite_callhome_optin_form'),
    'access arguments' => array('administer satellite settings'),
  );

  return $items;
}

/**
 * Configuration form callback
 */
function satellite_callhome_optin_form($form, &$form_state){

  $form['callhome'] = array(
  '#type' => 'fieldset',
  );

  $form['callhome']['optin'] = array(
    '#type' => 'checkbox',
    '#title' => 'Send Satellite information to ESN IT Committee',
    '#description' => t('If this box is checked, this Satellite will send installation information to the ESN IT Committee. Collected information: <ul>Satellite version</ul><ul>IP address</ul><ul>Website url</ul><ul>Enabled modules</ul><ul>Operating System, PHP and PHP extensions\' versions</ul>'),
    '#default_value' => variable_get('satellite_callhome_optin', TRUE)
  );
  $form['callhome']['update'] = array(
    '#type' => 'checkbox',
    '#title' => 'Get an update notification',
    '#description' => t('If this box is checked, this Satellite will check for updates and inform the administrator.'),
    '#default_value' => variable_get('satellite_callhome_update', TRUE)
  );

  $form['callhome']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;

}

/**
 * submit callback
 */
function satellite_callhome_optin_form_submit($form, &$form_state) {

  variable_set('satellite_callhome_optin', $form_state['values']['optin']);
  variable_set('satellite_callhome_update', $form_state['values']['update']);

}

/**
 * Sets the naging message if the latest release version is not the same
 */
function satellite_callhome_set_message() {
  $release = satellite_callhome_get_updates();
  // the releases are sorted with the newest first
  $release = reset($release);
  
  if (!$release) {
    // If the release could not be fetched, don't display the message
    variable_set('satellite_callhome_message', FALSE);
  }
  
  $version = satellite_callhome_version();
  if ($version != 'unknown' && $version != '7.x-' . $release['version']) {
    variable_set('satellite_callhome_message', 
      t('There is a new update (@version) for your ESN Satellite! <a href="@link" target="_blank">Download it now</a>',
      array('@version' => $release['version'], '@link' => $release['link']))
    );
  }
  else {
    variable_set('satellite_callhome_message', FALSE);
  }
}

/**
 * Implements hook_init.
 */
function satellite_callhome_init() {
  if (user_access('administer site configuration')) { // && arg(0) == 'admin'
    $message = variable_get('satellite_callhome_message', FALSE);
    if ($message) {
      drupal_set_message($message, 'warning', FALSE);
    }
  }
}

/**
 * Implements hook_flush_chaches.
 */
function satellite_callhome_flush_caches() {
  // set the update notifications so that the message disappears after an update
  if (variable_get('satellite_callhome_update', FALSE)) {
    satellite_callhome_set_message();
  }
  // no cache tables to be cleared
  return array();
}


/**
 * fetch the satellite release history
 */
function satellite_callhome_get_updates() {

  $xml = @simplexml_load_file(SATELLITE_CALLHOME_RELEASE_URL);
  if (!$xml) {
    watchdog('satellite_callhome', 'The Satellite release history could not be reached.', array(),  WATCHDOG_ERROR);
    return array();
  }
  
  foreach ($xml->channel->item as $release) {
    // var_dump((string) $release->description);
    $data[((string) $release->description)] = array(
      'version' => ((string) $release->description),
      'release date' => ((string) $release->pubDate),
      'link' => ((string) $release->link), 
    );
  }
  return $data;
}

